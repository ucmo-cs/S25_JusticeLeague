{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Gaell\\\\OneDrive\\\\Desktop\\\\Project\\\\Project\\\\Frontend\\\\src\\\\LoginPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"./styles.css\"; // Import the shared styles\n\n// Login Page Component: Handles user login\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LoginPage = ({\n  setIsLoggedIn\n}) => {\n  _s();\n  const [username, setUsername] = useState(\"\"); // Stores the entered username\n  const [password, setPassword] = useState(\"\"); // Stores the entered password\n  const navigate = useNavigate(); // For programmatic navigation\n\n  // When user clicks \"Login\" button\n  const handleLogin = () => {\n    console.log(\"Logging in:\", username);\n    const loginRequest = {\n      userId: username,\n      password: password\n    };\n\n    // Send a login request to the backend\n    fetch(\"http://localhost:8081/login\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(loginRequest)\n    }).then(response => {\n      if (response.ok) {\n        // Login successful\n        localStorage.setItem(\"isLoggedIn\", \"true\");\n        localStorage.setItem(\"userId\", username); // Save user ID for session\n        setIsLoggedIn(true);\n        navigate(\"/dashboard\"); // Navigate to Dashboard\n      } else {\n        alert(\"Invalid login credentials.\"); // Login failed\n      }\n    }).catch(error => console.error(\"Login error:\", error));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"login-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"login-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Username\",\n        value: username,\n        onChange: e => setUsername(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        placeholder: \"Password\",\n        value: password,\n        onChange: e => setPassword(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"login-btn\",\n        onClick: handleLogin,\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(LoginPage, \"JBV44+s3MGwvm5P+UO1Bab3M9dc=\", false, function () {\n  return [useNavigate];\n});\n_c = LoginPage;\nexport default LoginPage;\nvar _c;\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"names":["React","useState","useNavigate","jsxDEV","_jsxDEV","LoginPage","setIsLoggedIn","_s","username","setUsername","password","setPassword","navigate","handleLogin","console","log","loginRequest","userId","fetch","method","headers","body","JSON","stringify","then","response","ok","localStorage","setItem","alert","catch","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Gaell/OneDrive/Desktop/Project/Project/Frontend/src/LoginPage.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"./styles.css\"; // Import the shared styles\n\n// Login Page Component: Handles user login\nconst LoginPage = ({ setIsLoggedIn }) => {\n  const [username, setUsername] = useState(\"\"); // Stores the entered username\n  const [password, setPassword] = useState(\"\"); // Stores the entered password\n  const navigate = useNavigate(); // For programmatic navigation\n\n  // When user clicks \"Login\" button\n  const handleLogin = () => {\n    console.log(\"Logging in:\", username);\n\n    const loginRequest = {\n      userId: username,\n      password: password,\n    };\n\n    // Send a login request to the backend\n    fetch(\"http://localhost:8081/login\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(loginRequest),\n    })\n    .then((response) => {\n      if (response.ok) {\n        // Login successful\n        localStorage.setItem(\"isLoggedIn\", \"true\");\n        localStorage.setItem(\"userId\", username); // Save user ID for session\n        setIsLoggedIn(true);\n        navigate(\"/dashboard\"); // Navigate to Dashboard\n      } else {\n        alert(\"Invalid login credentials.\"); // Login failed\n      }\n    })\n    .catch((error) => console.error(\"Login error:\", error));\n  };\n\n  return (\n    <div className=\"login-container\">\n      <div className=\"login-box\">\n        <h2>Login</h2>\n\n        {/* Username Input */}\n        <input\n          type=\"text\"\n          placeholder=\"Username\"\n          value={username}\n          onChange={(e) => setUsername(e.target.value)}\n        />\n\n        {/* Password Input */}\n        <input\n          type=\"password\"\n          placeholder=\"Password\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n        />\n\n        {/* Login Button */}\n        <button className=\"login-btn\" onClick={handleLogin}>Login</button>\n      </div>\n    </div>\n  );\n};\n\nexport default LoginPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}